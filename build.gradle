plugins {
    // Activate sonarqube plugin to run static code analysis
    id "org.sonarqube" version "2.7.1"
}

def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"
allprojects {

    task version(type: Exec) {
        def version = findProperty('versions.leitstand-events')         
        println 'Project version ('+project.name+'): ' + version
        project.setVersion(version)
    }
    group = 'io.leitstand.events'
    // Activate jacoco for all modules to measure unit test code coverage
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    repositories {
        maven {
            name = "Github"
            url = "https://maven.pkg.github.com/leitstand/artifacts"
            credentials {
                username = findProperty("github.download.username")
                password = findProperty("github.download.token")
            }
        }
        jcenter()
        mavenLocal()
    }
    publishing {
        repositories {
            mavenLocal()
            if (project.hasProperty('github')) {
                maven {
                    name = "Github"
                    url = uri("https://maven.pkg.github.com/leitstand/artifacts")
                    credentials {
                        username = findProperty("github.upload.username")
                        password = findProperty("github.upload.token")
                    }
                }
            }
        }
    }
}

jacoco {
  toolVersion='0.8.4'
}


task jacocoMerge(type: JacocoMerge){
   destinationFile = file(allTestCoverageFile)
   executionData = project.fileTree(dir:'.',include:'**/build/jacoco/test.exec')
}

sonarqube {
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}

project(':leitstand-events-ui') {
    sonarqube {
        skipProject = true
    }
}

subprojects {
    sonarqube {
        properties {
            property 'sonar.sources', 'src/main/java'
        }
    }
}
